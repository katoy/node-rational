// Generated by CoffeeScript 1.6.1
(function() {
  var BIG_ZERO, Rational, bignum, sprintf, util;

  util = require('util');

  bignum = require('bignum');

  sprintf = require('sprintf').sprintf;

  BIG_ZERO = bignum(0);

  Rational = (function() {
    var gcd, strPow10;

    function Rational(n, d) {
      if (n === void 0) {
        throw "#--- constructor: n == undefined";
      }
      if (!(n instanceof bignum)) {
        n = bignum(n);
      }
      if (d === void 0) {
        d = bignum(1);
      } else if (!(d instanceof bignum)) {
        d = bignum(d);
      }
      if (d.eq(0)) {
        throw "#--- constructor: d == 0";
      }
      if (BIG_ZERO.eq(n)) {
        d = bignum(1);
      }
      if (BIG_ZERO.gt(d)) {
        n = n.neg();
        d = d.neg();
      }
      this.n = n;
      this.d = d;
    }

    gcd = function(a, b) {
      var _gcd;
      _gcd = function(a, b) {
        if (b.eq(0)) {
          return a;
        } else {
          return _gcd(b, a.mod(b));
        }
      };
      return _gcd(a.abs(), b.abs());
    };

    Rational.prototype.gratestCommonDiviser = function() {
      return gcd(this.n.abs(), this.d.abs());
    };

    Rational.prototype.numerator = function() {
      var x;
      x = this.n.abs().div(this.gratestCommonDiviser());
      if (this.n.lt(0)) {
        x = x.neg();
      }
      return x;
    };

    Rational.prototype.denominator = function() {
      return this.d.abs().div(this.gratestCommonDiviser());
    };

    Rational.prototype.add = function(y) {
      var d, g, n;
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      n = this.numerator().mul(y.denominator()).add(y.numerator().mul(this.denominator()));
      d = this.denominator().mul(y.denominator());
      g = gcd(n, d);
      return new Rational(n.div(g), d.div(g));
    };

    Rational.prototype.sub = function(y) {
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      return this.add(y.neg());
    };

    Rational.prototype.mul = function(y) {
      var d, g, n;
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      n = this.numerator().mul(y.numerator());
      d = this.denominator().mul(y.denominator());
      g = gcd(n, d);
      return new Rational(n.div(g), d.div(g));
    };

    Rational.prototype.div = function(y) {
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      return this.mul(y.inv());
    };

    Rational.prototype.neg = function() {
      return new Rational(this.n.neg(), this.d);
    };

    Rational.prototype.inv = function() {
      if (this.n.eq(0)) {
        throw "#--- inv: @n == 0";
      }
      return new Rational(this.d, this.n);
    };

    Rational.prototype.compare = function(y) {
      var diffn;
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      diffn = this.numerator().mul(y.denominator()).sub(y.numerator().mul(this.denominator()));
      if (diffn.gt(0)) {
        return 1;
      } else if (diffn.lt(0)) {
        return -1;
      }
      return 0;
    };

    Rational.prototype.eq = function(y) {
      return this.compare(y) === 0;
    };

    Rational.prototype.lt = function(y) {
      return this.compare(y) < 0;
    };

    Rational.prototype.le = function(y) {
      return this.compare(y) <= 0;
    };

    Rational.prototype.gt = function(y) {
      return this.compare(y) > 0;
    };

    Rational.prototype.ge = function(y) {
      return this.compare(y) >= 0;
    };

    Rational.prototype.pow = function(y) {
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      return new Rational(this.numerator().pow(y), this.denominator().pow(y));
    };

    Rational.prototype.floatValue = function() {
      var d, n;
      n = parseFloat(this.numerator());
      d = parseFloat(this.denominator());
      return (1.0 * n) / d;
    };

    Rational.prototype.reduce = function() {
      var g;
      g = gcd(this.n, this.d);
      return new Rational(this.n.div(g), this.d.div(g));
    };

    Rational.prototype.toString = function() {
      return "" + (this.n.toString()) + "/" + (this.d.toString());
    };

    Rational.prototype.toRepeatString = function() {
      var a, b, i, m, r, sign;
      a = this.n;
      b = this.d;
      sign = a.div(b).ge(0) ? "" : "-";
      a = a.abs();
      b = b.abs();
      if (b.eq(1)) {
        return "" + sign + a;
      }
      r = "" + (a.div(b).toString()) + ".";
      a = a.mod(b);
      m = [];
      while (a.gt(0)) {
        m.push(a.toString());
        a = a.mul(10);
        r += "" + (a.div(b).toString());
        a = a.mod(b);
        i = m.indexOf(a.toString());
        if (i >= 0) {
          r = r.substring(0, i + 2) + '{' + r.substring(i + 2) + "}";
          break;
        }
      }
      return "" + sign + r;
    };

    strPow10 = function(p) {
      var i, zs, _i, _j;
      zs = '';
      if (p > 0) {
        for (i = _i = 1; 1 <= p ? _i <= p : _i >= p; i = 1 <= p ? ++_i : --_i) {
          zs += '0';
        }
        return "1" + zs;
      } else if (p === 0) {
        return "1";
      } else if (p === -1) {
        return "0.1";
      } else {
        for (i = _j = p; p <= -2 ? _j <= -2 : _j >= -2; i = p <= -2 ? ++_j : --_j) {
          zs += '0';
        }
        return "0." + zs + "1";
      }
    };

    Rational.parseFloat = function(val) {
      var NUM_FORMAT, d, deR, dot, m, n, n0, n1, p, r, s, sign, str, x;
      deR = /^w*([+-]?)(\d*)(\.?)(\d*?)e([+-]?\d+)w*$/i;
      NUM_FORMAT = "%+.12e";
      str = sprintf("%+.12e", val);
      r = deR.exec(str);
      if (r === null) {
        throw "#--- parseFloat: Error: " + str;
      }
      x = r[0], s = r[1], n0 = r[2], dot = r[3], n1 = r[4], m = r[5];
      sign = s === "-" ? -1 : 1;
      p = parseInt(m, 10);
      n = bignum("" + n0 + n1).mul(sign);
      d = bignum(1);
      if (p - n1.length > 0) {
        n = n.mul(strPow10(p - n1.length));
      } else {
        d = bignum(strPow10(-p + n1.length));
      }
      while ((d.gt(1)) && (n.abs().gt(1)) && (n.mod(10).eq(0))) {
        n = n.div(10);
        d = d.div(10);
      }
      return new Rational(n, d);
    };

    Rational.parseStr = function(str) {
      var a, b, c, d, fixpointR, intPart, n, nonRepeatPart, pat, r, repR, repeatPart, s, sign, x;
      repR = /^w*([+-]?)(\d+)\.?(\d*)\{(\d+)\}w*$/;
      fixpointR = /^w*([+-]?)(\d+)\.?(\d*)2*$/;
      pat = repR.exec(str);
      if (pat) {
        x = pat[0], s = pat[1], a = pat[2], b = pat[3], c = pat[4];
        sign = s === "-" ? -1 : 1;
        intPart = new Rational(bignum(a));
        nonRepeatPart = b === "" ? new Rational(0) : new Rational(bignum(b), bignum(strPow10(b.length)));
        n = bignum(c).mul(sign);
        d = bignum(strPow10(c.length)).sub(1).mul(bignum(strPow10(b.length)));
        repeatPart = new Rational(n, d);
        return r = intPart.add(nonRepeatPart).add(repeatPart).mul(sign);
      } else {
        pat = fixpointR.exec(str);
        x = pat[0], s = pat[1], a = pat[2], b = pat[3];
        sign = s === "-" ? -1 : 1;
        n = bignum("" + a + b);
        d = bignum(strPow10(b.length));
        return new Rational(n, d).mul(sign);
      }
    };

    return Rational;

  })();

  module.exports = Rational;

}).call(this);
