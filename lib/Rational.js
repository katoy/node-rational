// Generated by CoffeeScript 1.6.1
(function() {
  var BIG_MINUS_ONE, BIG_ONE, BIG_TEN, BIG_ZERO, Rational, bigdecimal, sprintf, util;

  util = require('util');

  bigdecimal = require('bigdecimal');

  sprintf = require('sprintf').sprintf;

  BIG_ZERO = new bigdecimal.BigInteger("0");

  BIG_ONE = new bigdecimal.BigInteger("1");

  BIG_MINUS_ONE = new bigdecimal.BigInteger("-1");

  BIG_TEN = new bigdecimal.BigInteger("10");

  Rational = (function() {
    var gcd, strPow10;

    function Rational(n, d) {
      if (n === void 0) {
        throw "#--- Rational.constructor: n == undefined";
      }
      if (!(n instanceof bigdecimal.BigInteger)) {
        n = new bigdecimal.BigInteger("" + n);
      }
      if (d === void 0) {
        d = new bigdecimal.BigInteger("1");
      } else if (!(d instanceof bigdecimal.BigInteger)) {
        d = new bigdecimal.BigInteger("" + d);
      }
      if (d.compareTo(BIG_ZERO) === 0) {
        throw "#--- Rational.constructor: d == 0";
      }
      if (BIG_ZERO.compareTo(n) === 0) {
        d = new bigdecimal.BigInteger("1");
      }
      if (BIG_ZERO.compareTo(d) > 0) {
        n = n.negate();
        d = d.negate();
      }
      this.n = n;
      this.d = d;
    }

    gcd = function(a, b) {
      var _gcd;
      _gcd = function(a, b) {
        if (b.compareTo(BIG_ZERO) === 0) {
          return a;
        } else {
          return _gcd(b, a.remainder(b));
        }
      };
      return _gcd(a.abs(), b.abs());
    };

    Rational.prototype.gratestCommonDiviser = function() {
      return gcd(this.n.abs(), this.d.abs());
    };

    Rational.prototype.numerator = function() {
      var x;
      x = this.n.abs().divide(this.gratestCommonDiviser());
      if (this.n.compareTo(BIG_ZERO) < 0) {
        x = x.negate();
      }
      return x;
    };

    Rational.prototype.denominator = function() {
      return this.d.abs().divide(this.gratestCommonDiviser());
    };

    Rational.prototype.add = function(y) {
      var d, g, n;
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      n = this.numerator().multiply(y.denominator()).add(y.numerator().multiply(this.denominator()));
      d = this.denominator().multiply(y.denominator());
      g = gcd(n, d);
      return new Rational(n.divide(g), d.divide(g));
    };

    Rational.prototype.sub = function(y) {
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      return this.add(y.neg());
    };

    Rational.prototype.mul = function(y) {
      var d, g, n;
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      n = this.numerator().multiply(y.numerator());
      d = this.denominator().multiply(y.denominator());
      g = gcd(n, d);
      return new Rational(n.divide(g), d.divide(g));
    };

    Rational.prototype.div = function(y) {
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      return this.mul(y.inv());
    };

    Rational.prototype.neg = function() {
      return new Rational(this.n.negate(), this.d);
    };

    Rational.prototype.inv = function() {
      if (this.n.compareTo(BIG_ZERO) === 0) {
        throw "#--- Rational.inv: @n == 0";
      }
      return new Rational(this.d, this.n);
    };

    Rational.prototype.compare = function(y) {
      var diffn;
      if (!(y instanceof Rational)) {
        y = new Rational(y);
      }
      diffn = this.numerator().multiply(y.denominator()).subtract(y.numerator().multiply(this.denominator()));
      if (diffn.compareTo(BIG_ZERO) > 0) {
        return 1;
      } else if (diffn.compareTo(BIG_ZERO) < 0) {
        return -1;
      }
      return 0;
    };

    Rational.prototype.eq = function(y) {
      return this.compare(y) === 0;
    };

    Rational.prototype.lt = function(y) {
      return this.compare(y) < 0;
    };

    Rational.prototype.le = function(y) {
      return this.compare(y) <= 0;
    };

    Rational.prototype.gt = function(y) {
      return this.compare(y) > 0;
    };

    Rational.prototype.ge = function(y) {
      return this.compare(y) >= 0;
    };

    Rational.prototype.pow = function(y) {
      if (!(y instanceof bigdecimal.BigInteger)) {
        if (parseInt("" + y, 10) !== parseFloat("" + y)) {
          throw "#--- Rational.pow: y is non-Integer";
        }
        y = new bigdecimal.BigInteger("" + y);
      }
      if (y.floatValue() !== y.intValue()) {
        throw "#--- Rational.pow: y is non-Integer";
      }
      if (y.compareTo(BIG_ZERO) < 0) {
        throw "#--- Rational.pow: y is negative-Integer";
      }
      return new Rational(this.numerator().pow(y), this.denominator().pow(y));
    };

    Rational.prototype.floatValue = function() {
      var d, n;
      n = parseFloat(this.numerator());
      d = parseFloat(this.denominator());
      return (1.0 * n) / d;
    };

    Rational.prototype.reduce = function() {
      var g;
      g = gcd(this.n, this.d);
      return new Rational(this.n.divide(g), this.d.divide(g));
    };

    Rational.prototype.toString = function() {
      return "" + (this.n.toString()) + "/" + (this.d.toString());
    };

    Rational.prototype.toRepeatString = function() {
      return Rational.getRepeatString(this.n, this.d);
    };

    Rational.getRepeatString = function(a, b) {
      var i, m, r, sign;
      if (!(a instanceof bigdecimal.BigInteger)) {
        a = new bigdecimal.BigInteger("" + a);
      }
      if (!(b instanceof bigdecimal.BigInteger)) {
        b = new bigdecimal.BigInteger("" + b);
      }
      sign = a.compareTo(BIG_ZERO) < 0 ? "-" : "";
      a = a.abs();
      b = b.abs();
      if (b.compareTo(BIG_ONE) === 0) {
        return "" + sign + a;
      }
      m = [];
      r = "" + (a.divide(b).toString());
      if (a.remainder(b).compareTo(BIG_ZERO) > 0) {
        r += ".";
      }
      a = a.remainder(b);
      while (a.compareTo(BIG_ZERO) > 0) {
        m.push(a.toString());
        a = a.multiply(BIG_TEN);
        r += "" + (a.divide(b).toString());
        a = a.remainder(b);
        i = m.indexOf(a.toString());
        if (i >= 0) {
          r = r.substring(0, i + 2) + '{' + r.substring(i + 2) + "}";
          break;
        }
      }
      return "" + sign + r;
    };

    strPow10 = function(p) {
      var i, zs, _i, _j;
      zs = '';
      if (p > 0) {
        for (i = _i = 1; 1 <= p ? _i <= p : _i >= p; i = 1 <= p ? ++_i : --_i) {
          zs += '0';
        }
        return "1" + zs;
      } else if (p === 0) {
        return "1";
      } else if (p === -1) {
        return "0.1";
      } else {
        for (i = _j = p; p <= -2 ? _j <= -2 : _j >= -2; i = p <= -2 ? ++_j : --_j) {
          zs += '0';
        }
        return "0." + zs + "1";
      }
    };

    Rational.parseFloat = function(val) {
      var NUM_FORMAT, d, deR, dot, m, n, n0, n1, p, r, s, sign, str, x;
      deR = /^w*([+-]?)(\d*)(\.?)(\d*?)e([+-]?\d+)w*$/i;
      NUM_FORMAT = "%+.12e";
      str = sprintf("%+.12e", val);
      r = deR.exec(str);
      if (r === null) {
        throw "#--- Rational.parseFloat: Error: " + str;
      }
      x = r[0], s = r[1], n0 = r[2], dot = r[3], n1 = r[4], m = r[5];
      sign = s === "-" ? BIG_MINUS_ONE : BIG_ONE;
      p = parseInt(m, 10);
      n = new bigdecimal.BigInteger("" + n0 + n1).multiply(sign);
      d = new bigdecimal.BigInteger("1");
      if (p - n1.length > 0) {
        n = n.multiply(new bigdecimal.BigInteger(strPow10(p - n1.length)));
      } else {
        d = new bigdecimal.BigInteger(strPow10(-p + n1.length));
      }
      while ((d.compareTo(BIG_ONE) > 0) && (n.abs().compareTo(BIG_ONE) > 0) && (n.remainder(BIG_TEN).compareTo(BIG_ZERO) === 0)) {
        n = n.divide(BIG_TEN);
        d = d.divide(BIG_TEN);
      }
      return new Rational(n, d);
    };

    Rational.parseStr = function(str) {
      var a, b, c, d, fixpointR, intPart, n, nonRepeatPart, pat, repR, repeatPart, s, sign, x;
      repR = /^w*([+-]?)(\d+)\.?(\d*)\{(\d+)\}w*$/;
      fixpointR = /^w*([+-]?)(\d+)\.?(\d*)w*$/;
      pat = repR.exec(str);
      if (pat) {
        x = pat[0], s = pat[1], a = pat[2], b = pat[3], c = pat[4];
        sign = s === "-" ? -1 : 1;
        intPart = new Rational(new bigdecimal.BigInteger(a));
        nonRepeatPart = b === "" ? new Rational(0) : new Rational(new bigdecimal.BigInteger(b), new bigdecimal.BigInteger(strPow10(b.length)));
        n = new bigdecimal.BigInteger(c);
        d = new bigdecimal.BigInteger(strPow10(c.length)).subtract(BIG_ONE).multiply(new bigdecimal.BigInteger(strPow10(b.length)));
        repeatPart = new Rational(n, d);
        return intPart.add(nonRepeatPart).add(repeatPart).mul(sign);
      } else {
        pat = fixpointR.exec(str);
        if (pat === null) {
          throw "#--- Rational.parseStr: Error: " + str;
        }
        x = pat[0], s = pat[1], a = pat[2], b = pat[3];
        sign = s === "-" ? -1 : 1;
        n = new bigdecimal.BigInteger("" + a + b);
        d = new bigdecimal.BigInteger(strPow10(b.length));
        return new Rational(n, d).mul(sign);
      }
    };

    return Rational;

  })();

  module.exports = Rational;

}).call(this);
